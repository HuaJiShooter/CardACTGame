{
	"nodes":[
		{"id":"c912a2f397a23870","type":"group","x":640,"y":-673,"width":1060,"height":1638,"label":"生成卡牌Modifier类"},
		{"id":"476b82341b1c44bb","type":"group","x":-600,"y":-406,"width":1124,"height":1109,"label":"组装ICondition和IEffect"},
		{"id":"82432751b2dcec8e","type":"group","x":660,"y":-62,"width":1020,"height":630,"color":"5","label":"卡牌Modifier类"},
		{"id":"3050c3c04510ebe8","type":"group","x":875,"y":-591,"width":591,"height":370,"color":"6","label":"静态类 事件总线"},
		{"id":"dde3ed8df2fd3ff2","type":"group","x":-271,"y":-69,"width":495,"height":350,"color":"6","label":"静态类 AutoMapper"},
		{"id":"204121103b70c5de","type":"group","x":677,"y":159,"width":493,"height":300,"label":"变量"},
		{"id":"902e0e94f35b5f72","type":"group","x":1760,"y":46,"width":573,"height":201,"color":"2","label":"工厂类 CardFactory"},
		{"id":"afc15e4edf026523","type":"group","x":911,"y":768,"width":519,"height":177,"color":"2","label":"工厂类 ModifierFactory"},
		{"id":"4278c361a48ab515","type":"group","x":-512,"y":416,"width":488,"height":180,"color":"3","label":"接口类 ICondition"},
		{"id":"30f6af1f11acbf10","type":"group","x":0,"y":416,"width":488,"height":178,"color":"3","label":"接口类 IEffect"},
		{"id":"01d7b5326ba85106","type":"group","x":1180,"y":219,"width":478,"height":149,"label":"主要函数"},
		{"id":"d63cbd53dd4d94f6","type":"group","x":-271,"y":32,"width":495,"height":119,"color":"6","label":"静态变量"},
		{"id":"e9b4c861b204cb59","type":"group","x":1160,"y":59,"width":498,"height":100,"label":"构造函数"},
		{"id":"cf8ff2b17eae1f15","type":"group","x":-479,"y":-304,"width":386,"height":120,"color":"2","label":"工厂类 ConditionFactory"},
		{"id":"23e207514992bc0b","type":"group","x":-271,"y":194,"width":495,"height":81,"color":"6","label":"静态函数"},
		{"id":"34c21fcbb8b8470f","type":"group","x":29,"y":-304,"width":331,"height":120,"color":"2","label":"工厂类 EffectFactory"},
		{"id":"11a8246d454186c3","type":"group","x":1180,"y":410,"width":325,"height":99,"label":"工具函数"},
		{"id":"acd1e5b911f6c3b4","type":"text","text":"protected Card card","x":765,"y":179,"width":250,"height":60},
		{"id":"bcfa68343f075946","type":"text","text":"public void Bind(CardRuntime c, GameContext ctx)","x":1200,"y":239,"width":438,"height":50},
		{"id":"a7224bbf78bb8196","type":"text","text":"\treadonly List<ICondition> _conds","x":710,"y":299,"width":392,"height":60},
		{"id":"2d8b21ae5758bdc5","type":"text","text":"CardModifier","x":830,"y":-1,"width":185,"height":60,"color":"5"},
		{"id":"4e39dd85028ceb53","type":"text","text":"\treadonly List<IEffect>    _effects","x":710,"y":359,"width":392,"height":69},
		{"id":"52b437169040a94e","type":"text","text":"EventBus","x":895,"y":-571,"width":250,"height":60,"color":"5"},
		{"id":"c70417413503175b","type":"text","text":"\tpublic static class ModifierFactory {\n\t    private static Dictionary<string, Func<Card, bool>> _conditionMap = new() {\n\t        { \"HasSameCardInHand\", card => ConditionPresets.HasSameCardInHand(card) }\n\t    };\n\t    \n\t    private static Dictionary<string, Action<Card>> _effectMap = new() {\n\t        { \"ReduceCostBySameCardCount\", card => EffectPresets.ReduceCostBySameCardCount(card) }\n\t    };\n\t\n\t    public static Modifier CreateFromConfig(ModifierConfig config) {\n\t        var modifier = new Modifier();\n\t        foreach (var condName in config.Conditions) {\n\t            modifier.Conditions.Add(_conditionMap[condName]);\n\t        }\n\t        foreach (var effectName in config.Effects) {\n\t            modifier.Effects.Add(_effectMap[effectName]);\n\t        }\n\t        return modifier;\n\t    }\n\t}","x":3960,"y":-93,"width":1202,"height":578},
		{"id":"16ed5fe16e3ba9e5","type":"text","text":"\tclass Modifier {\n\t    public int Priority;\n\t    readonly List<ICondition> _conds;\n\t    readonly List<IEffect>    _effects;\n\t    CardRuntime _owner;\n\t\n\t    public Modifier(IEnumerable<ICondition> cs, IEnumerable<IEffect> es, int p) {\n\t        _conds   = cs.ToList();\n\t        _effects = es.ToList();\n\t        Priority = p;\n\t    }\n\t    public void Bind(CardRuntime c, GameContext ctx) {\n\t        _owner = c;\n\t        foreach (var cond in _conds)\n\t            foreach (var evt in cond.SubscribedEvents)\n\t                EventBus.Subscribe(evt, Handle);\n\t    }\n\t    public void Unbind() {\n\t        foreach (var cond in _conds)\n\t            foreach (var evt in cond.SubscribedEvents)\n\t                EventBus.Unsubscribe(evt, Handle);\n\t    }\n\t    void Handle(GameEvent e) {\n\t        if (_conds.All(cd => cd.Evaluate(_owner, e, _owner.Ctx)))\n\t            foreach (var eff in _effects) eff.Apply(_owner, _owner.Ctx);\n\t    }\n\t}","x":-1420,"y":-1720,"width":980,"height":737},
		{"id":"8c6de7f81798bf67","type":"text","text":"绑定函数","x":-1670,"y":120,"width":141,"height":50},
		{"id":"0c96e90a6e4b5e04","type":"text","text":"\n// ----------------------------\n// 文件：Card.cs\n// ----------------------------\n\n\tpublic class Card : MonoBehaviour\n\t{\n\t    public List<Modifier> modifiers = new List<Modifier>();\n\t    \n\t    private void Start()\n\t    {\n\t        // 示例：从配置加载Modifier（需根据实际项目扩展）\n\t        LoadModifiersFromConfig();\n\t    }\n\t\n\t    private void LoadModifiersFromConfig()\n\t    {\n\t        // 实际项目中应从ScriptableObject或JSON加载\n\t        // 这里手动添加示例Modifier\n\t        var modifier = gameObject.AddComponent<SameCardCostModifier>();\n\t        modifiers.Add(modifier);\n\t        modifier.AttachToCard(this);\n\t    }\n\t\n\t    private void OnDestroy()\n\t    {\n\t        foreach (var modifier in modifiers)\n\t        {\n\t            Destroy(modifier);\n\t        }\n\t    }\n\t}","x":-2889,"y":-880,"width":1360,"height":850},
		{"id":"0822457d22e39ce1","type":"text","text":"// ----------------------------\n// 文件：Modifier.cs\n// ----------------------------\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n\tpublic abstract class Modifier : MonoBehaviour\n\t{\n\t    protected Card card; // 绑定的卡牌\n\t    \n\t    // 初始化时绑定到卡牌\n\t    public virtual void AttachToCard(Card targetCard)\n\t    {\n\t        card = targetCard;\n\t        SubscribeEvents(); // 注册事件监听\n\t    }\n\t\n\t    // 销毁时清理\n\t    protected virtual void OnDestroy() => UnsubscribeEvents();\n\t\n\t    // 需要子类实现的方法\n\t    protected abstract void SubscribeEvents();\n\t    protected abstract void UnsubscribeEvents();\n\t    public abstract bool CheckConditions(); // 条件检查\n\t    public abstract void ExecuteEffects();  // 执行效果\n\t}\n","x":-2889,"y":-1660,"width":1091,"height":720},
		{"id":"e7a2cdf773e161a4","type":"text","text":"具体Modifier实现案例：\n// ----------------------------\n// 文件：SameCardCostModifier.cs\n// ----------------------------\n\n\tpublic class SameCardCostModifier : Modifier\n\t{\n\t    private int baseCost; // 基础费用\n\t    \n\t    protected override void SubscribeEvents()\n\t    {\n\t        // 监听手牌变化事件\n\t        PlayerHand.OnHandUpdated += UpdateCost;\n\t        baseCost = card.BaseCost; // 保存初始费用\n\t    }\n\t\n\t    protected override void UnsubscribeEvents()\n\t    {\n\t        PlayerHand.OnHandUpdated -= UpdateCost;\n\t    }\n\t\n\t    // 动态计算费用\n\t    private void UpdateCost()\n\t    {\n\t        if (CheckConditions())\n\t        {\n\t            int sameCardCount = PlayerHand.Instance.GetSameCardCount(card.CardId);\n\t            card.CurrentCost = Mathf.Max(0, baseCost - sameCardCount);\n\t        }\n\t    }\n\t\n\t    public override bool CheckConditions()\n\t    {\n\t        // 此处可添加额外条件，例如：\"仅当卡牌在手牌中时生效\"\n\t        return card.IsInHand;\n\t    }\n\t\n\t    public override void ExecuteEffects()\n\t    {\n\t        // 此Modifier无主动触发效果，仅通过事件更新费用\n\t    }\n\t}","x":-3163,"y":120,"width":1493,"height":1079},
		{"id":"688244a90e5bdeeb","type":"text","text":"static class CardFactory {\n    public static CardRuntime Create(string cardId, GameContext ctx) {\n        var proto = StaticDB.CardTable[cardId];\n        var card  = new CardRuntime(proto, ctx);\n        foreach (var mid in proto.ModifierIds) {\n            Modifier m = ModifierFactory.Create(mid);\n            card.AddModifier(m);\n        }\n        return card;\n    }\n}\n","x":2430,"y":-1120,"width":622,"height":319},
		{"id":"1e615fd802c33b62","type":"text","text":"\tpublic interface ICondition {\n\t    /// 仅在接收到感兴趣事件时被调用\n\t    bool Evaluate(CardRuntime self, GameEvent e, GameContext ctx);\n\t    IEnumerable<GameEvt> SubscribedEvents { get; }   // 供工厂注册用\n\t}\n\t\n\tpublic interface IEffect {\n\t    void Apply(CardRuntime self, GameContext ctx);\n\t}\n","x":2741,"y":1120,"width":570,"height":331},
		{"id":"fa870e45cd6e7f9c","type":"text","text":"\t// ---------------- Event 系统（极简版） ----------------\n\tpublic enum GameEvt { HandChanged, CardPlayed, BuffApplied, ManaChanged }\n\t\n\tpublic struct GameEvent {\n\t    public GameEvt Type;\n\t    public object  Source;      // 触发者或卡牌\n\t    public object  Target;      // 受影响目标\n\t    public object  Payload;     // 其他参数\n\t}\n\t\n\tpublic static class EventBus {\n\t    private static readonly Dictionary<GameEvt, List<Action<GameEvent>>> _map = new();\n\t    public static void Subscribe(GameEvt t, Action<GameEvent> cb) {\n\t        if (!_map.TryGetValue(t, out var lst)) _map[t] = lst = new();\n\t        lst.Add(cb);\n\t    }\n\t    public static void Unsubscribe(GameEvt t, Action<GameEvent> cb) {\n\t        if (_map.TryGetValue(t, out var lst)) lst.Remove(cb);\n\t    }\n\t    public static void Publish(in GameEvent e) {\n\t        if (_map.TryGetValue(e.Type, out var lst))\n\t            // 简单遍历；高频可改成 for\n\t            foreach (var cb in lst) cb.Invoke(e);\n\t    }\n\t}\n","x":3080,"y":-2560,"width":1526,"height":660},
		{"id":"d2753e7314486705","type":"text","text":"static class ConditionFactory {\n    public static ICondition Create(string id) {\n        if (!AutoMapper.CondMap.TryGetValue(id, out var tp))\n            throw new KeyNotFoundException($\"Condition '{id}' not found\");\n        return (ICondition)Activator.CreateInstance(tp)!;\n    }\n}\n\nstatic class EffectFactory {\n    public static IEffect Create(string id) {\n        if (!AutoMapper.EffMap.TryGetValue(id, out var tp))\n            throw new KeyNotFoundException($\"Effect '{id}' not found\");\n        return (IEffect)Activator.CreateInstance(tp)!;\n    }\n}\n","x":4005,"y":629,"width":779,"height":416},
		{"id":"415af19c7f44af44","type":"text","text":"\tstatic class AutoMapper {\n\t    public static readonly Dictionary<string, Type> CondMap;\n\t    public static readonly Dictionary<string, Type> EffMap;\n\t\n\t    static AutoMapper() {            // 静态构造：程序启动时执行一次\n\t        CondMap = new Dictionary<string, Type>();\n\t        EffMap  = new Dictionary<string, Type>();\n\t\n\t        var asm = Assembly.GetExecutingAssembly(); // 也可遍历 AppDomain\n\t        foreach (var t in asm.GetTypes()) {\n\t            if (typeof(ICondition).IsAssignableFrom(t)) {\n\t                var tag = t.GetCustomAttribute<ConditionTagAttribute>();\n\t                if (tag != null) CondMap[tag.Id] = t;\n\t            }\n\t            if (typeof(IEffect).IsAssignableFrom(t)) {\n\t                var tag = t.GetCustomAttribute<EffectTagAttribute>();\n\t                if (tag != null) EffMap[tag.Id] = t;\n\t            }\n\t        }\n\t    }\n\t}\n","x":4160,"y":-741,"width":714,"height":623},
		{"id":"9d838b31034a5d47","type":"text","text":"public static CardRuntime Create(string cardId, GameContext ctx)","x":1780,"y":167,"width":533,"height":60},
		{"id":"8003e31110cfd1d7","type":"text","text":"CardFactory","x":1817,"y":66,"width":171,"height":60,"color":"5"},
		{"id":"caa0f3f824d4eb27","type":"text","text":"\tpublic interface ICondition {\n\t    /// 仅在接收到感兴趣事件时被调用\n\t    bool Evaluate(CardRuntime self, GameEvent e, GameContext ctx);\n\t    IEnumerable<GameEvt> SubscribedEvents { get; }   // 供工厂注册用\n\t}\n\t\n\tpublic interface IEffect {\n\t    void Apply(CardRuntime self, GameContext ctx);\n\t}\n","x":1450,"y":1600,"width":784,"height":298},
		{"id":"15b8d99bcefaecfa","type":"text","text":"public int Priority","x":765,"y":239,"width":250,"height":60},
		{"id":"daf40d3f52fde31a","type":"text","text":"public void Unbind()","x":1200,"y":299,"width":250,"height":50},
		{"id":"fd49861ce71eafa1","type":"text","text":"void Handle(GameEvent e)","x":1200,"y":444,"width":285,"height":50},
		{"id":"2f540a5a65748f65","type":"text","text":" public Modifier(IEnumerable<ICondition> cs, IEnumerable<IEffect> es, int p)","x":1180,"y":79,"width":458,"height":50},
		{"id":"187e7abb89e2d877","type":"text","text":"ModifierFactory","x":954,"y":786,"width":180,"height":50,"color":"5"},
		{"id":"4edf93f981b8e0e3","type":"text","text":"private static readonly Dictionary<GameEvt, List<Action<GameEvent>>> _map","x":895,"y":-481,"width":551,"height":60},
		{"id":"76996d836c1e9c1f","type":"text","text":"public static void Subscribe(GameEvt t, Action<GameEvent> cb)","x":895,"y":-421,"width":440,"height":60},
		{"id":"ae7d198ac34ba79d","type":"text","text":"public static void Unsubscribe(GameEvt t, Action<GameEvent> cb)","x":895,"y":-361,"width":431,"height":60},
		{"id":"06f812a88d5d980e","type":"text","text":"public static void Publish(in GameEvent e)","x":895,"y":-301,"width":431,"height":60},
		{"id":"b00567aabd7a86e9","type":"text","text":"public static Modifier Create(string protoId)","x":954,"y":867,"width":387,"height":60},
		{"id":"3075b2cdb4cf950e","type":"text","text":"ICondition","x":-512,"y":416,"width":488,"height":60,"color":"5"},
		{"id":"418b6a52341cdd76","type":"text","text":"bool Evaluate(Card self, GameEvent e)","x":-512,"y":476,"width":488,"height":60},
		{"id":"e897746d8a5948e0","type":"text","text":"IEnumerable<GameEvt> SubscribedEvents","x":-512,"y":536,"width":488,"height":60},
		{"id":"017ebf6770213e56","type":"text","text":"public static ICondition Create(string id)","x":-480,"y":-244,"width":387,"height":60},
		{"id":"b698c81c912dcfc4","type":"text","text":"void Apply(Card self,CardUseContext ctx);","x":0,"y":476,"width":488,"height":58},
		{"id":"932cfefc15c9bd27","type":"text","text":"void Apply(Card self, CardUseContext ctx, int param = 0);","x":0,"y":534,"width":488,"height":60},
		{"id":"8b0d91aded4af866","type":"text","text":"EffectFactory","x":29,"y":-304,"width":331,"height":60,"color":"5"},
		{"id":"6dfde424d965eaae","type":"text","text":"public static IEffect Create(string id)","x":29,"y":-244,"width":331,"height":60},
		{"id":"28c100cd283c4785","type":"text","text":"IEffect","x":0,"y":416,"width":488,"height":60,"color":"5"},
		{"id":"0e752ffbb1217880","type":"text","text":"ConditionFactory","x":-479,"y":-304,"width":386,"height":60,"color":"5"},
		{"id":"b65c24cb4f9b7a06","type":"text","text":"public static readonly Dictionary<string, Type> CondMap","x":-271,"y":32,"width":495,"height":59},
		{"id":"c1208e169a8b597f","type":"text","text":"public static readonly Dictionary<string, Type> EffMap","x":-271,"y":91,"width":495,"height":60},
		{"id":"850e725e93a4eec9","type":"text","text":"AutoMapper()","x":-271,"y":199,"width":495,"height":60},
		{"id":"e77199607973a4dd","type":"text","text":"AutoMapper","x":-271,"y":-69,"width":495,"height":60,"color":"5"}
	],
	"edges":[
		{"id":"8735ffd5a9afa43b","fromNode":"2d8b21ae5758bdc5","fromSide":"bottom","toNode":"204121103b70c5de","toSide":"top"},
		{"id":"4a47ef53f16b7dae","fromNode":"dde3ed8df2fd3ff2","fromSide":"top","toNode":"cf8ff2b17eae1f15","toSide":"bottom"},
		{"id":"2a57630c5554f1bf","fromNode":"dde3ed8df2fd3ff2","fromSide":"top","toNode":"34c21fcbb8b8470f","toSide":"bottom"},
		{"id":"0bf396c0cbff692c","fromNode":"34c21fcbb8b8470f","fromSide":"bottom","toNode":"dde3ed8df2fd3ff2","toSide":"top"},
		{"id":"69806a716b1c5565","fromNode":"cf8ff2b17eae1f15","fromSide":"bottom","toNode":"dde3ed8df2fd3ff2","toSide":"top"},
		{"id":"6efed975fa275582","fromNode":"30f6af1f11acbf10","fromSide":"top","toNode":"dde3ed8df2fd3ff2","toSide":"bottom"},
		{"id":"8390324b8c7210e0","fromNode":"3050c3c04510ebe8","fromSide":"bottom","toNode":"82432751b2dcec8e","toSide":"top"},
		{"id":"a70fc937479a38ff","fromNode":"afc15e4edf026523","fromSide":"top","toNode":"82432751b2dcec8e","toSide":"bottom"},
		{"id":"8cc7a5d848888c94","fromNode":"476b82341b1c44bb","fromSide":"right","toNode":"c912a2f397a23870","toSide":"left"},
		{"id":"14614d2923c2c43f","fromNode":"c912a2f397a23870","fromSide":"right","toNode":"902e0e94f35b5f72","toSide":"left"},
		{"id":"5617ba10a1261a81","fromNode":"3075b2cdb4cf950e","fromSide":"top","toNode":"dde3ed8df2fd3ff2","toSide":"bottom"}
	]
}